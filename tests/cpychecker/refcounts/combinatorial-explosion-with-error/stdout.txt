Trace 0:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 1 + N where N >= 32
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:33

Trace 1:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 2 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 2:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 2 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 3:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 4:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 2 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 5:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 6:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 7:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 8:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 2 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:143

Trace 9:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 10:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 11:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 12:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 13:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 14:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 15:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 16:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 2 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:140

Trace 17:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 18:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 19:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 20:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 21:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 22:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 23:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 24:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:143

Trace 25:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 26:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 27:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 28:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 29:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 30:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 31:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 32:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 2 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:137

Trace 33:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 34:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 35:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 36:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 37:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 38:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 39:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 40:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:143

Trace 41:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 42:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 43:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 44:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 45:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 46:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 47:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 48:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:140

Trace 49:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 50:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 51:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 52:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 53:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 54:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 55:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 56:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:143

Trace 57:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 58:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 59:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 60:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 61:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 62:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 63:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 7 + N where N >= 26
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 64:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 2 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:134

Trace 65:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 66:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 67:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 68:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 69:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 70:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 71:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 72:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:143

Trace 73:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 74:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 75:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 76:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 77:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 78:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 79:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 80:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:140

Trace 81:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 82:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 83:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 84:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 85:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 86:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 87:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 88:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:143

Trace 89:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 90:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 91:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 92:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 93:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 94:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 95:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 7 + N where N >= 26
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 96:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 3 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:137

Trace 97:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 98:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 99:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 100:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 101:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 102:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 103:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 104:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:143

Trace 105:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 106:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 107:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 108:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 109:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 110:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 111:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 7 + N where N >= 26
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 112:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 4 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:140

Trace 113:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 114:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 115:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 116:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 117:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 118:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 119:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 7 + N where N >= 26
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 120:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 5 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:143

Trace 121:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 122:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 123:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 7 + N where N >= 26
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 124:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 6 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:146

Trace 125:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 7 + N where N >= 26
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152

Trace 126:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() succeeds'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 7 + N where N >= 26
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:149

Trace 127:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyDict_New() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() succeeds'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'when PyModule_AddObject() fails'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34)) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:34
    r->ob_refcnt: refs: 8 + N where N >= 25
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=34), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=32), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45:
    repr(): RegionOnHeap('PyDictObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45))
    str(): PyDictObject allocated at tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:45
    r->ob_refcnt: refs: 1 + N where N >= 0
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c', line=45), region=RegionForGlobal(gcc.VarDecl('PyDict_Type')))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion-with-error/input.c:152
