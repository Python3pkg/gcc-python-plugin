tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c: In function 'test':
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:38:nn: warning: ob_refcnt of return value is 1 too low [enabled by default]
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:38:nn: note: was expecting final ob_refcnt to be N + 1 (for some unknown N)
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:38:nn: note: due to object being referenced by: return value
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:38:nn: note: but final ob_refcnt is N + 0
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:32:nn: note: borrowed reference returned by PyWeakref_GetObject() allocated at:     item = PyWeakref_GetObject(some_ref);
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:32:nn: note: when treating unknown struct PyObject * from tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:26 as non-NULL at:     item = PyWeakref_GetObject(some_ref);
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:32:nn: note: ob_refcnt is now refs: 0 + N where N >= 1
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:33:nn: note: taking True path at:     if (item) {
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:35:nn: note: reaching:         return item;
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:38:nn: note: returning
tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c:30:nn: note: graphical error report for function 'test' written out to 'tests/cpychecker/refcounts/PyWeakref_GetObject/incorrect/input.c.test-refcount-errors.html'
