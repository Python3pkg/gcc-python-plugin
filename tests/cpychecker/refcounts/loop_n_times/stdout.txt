Trace 0:
  Transitions:
    'PyArg_ParseTuple() succeeds'
    'taking False path'
    'PyList_New() succeeds'
    'taking False path'
    'PyLong_FromLong() succeeds'
    'taking False path'
    'taking False path'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38), region=RegionOnHeap('PyListObject', gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38)))
    str(): (struct PyObject *)&RegionOnHeap('PyListObject', gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38)) from tests/cpychecker/refcounts/loop_n_times/input.c:38
    r->ob_refcnt: RefcountValue(1)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38), region=RegionForGlobal(gcc.VarDecl('PyList_Type')))
  Region("region-for-arg-gcc.ParmDecl('self')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('self')")
    str(): Region("region-for-arg-gcc.ParmDecl('self')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('self')"))
  Region("region-for-arg-gcc.ParmDecl('args')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('args')")
    str(): Region("region-for-arg-gcc.ParmDecl('args')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('args')"))
  PyLongObject allocated at tests/cpychecker/refcounts/loop_n_times/input.c:42:
    repr(): RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=42))
    str(): PyLongObject allocated at tests/cpychecker/refcounts/loop_n_times/input.c:42
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=42), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/loop_n_times/input.c:29

Trace 1:
  Transitions:
    'PyArg_ParseTuple() succeeds'
    'taking False path'
    'PyList_New() succeeds'
    'taking False path'
    'PyLong_FromLong() succeeds'
    'taking False path'
    'taking False path'
    'taking False path'
    'calling tp_dealloc on PyLongObject allocated at tests/cpychecker/refcounts/loop_n_times/input.c:42'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38), region=RegionOnHeap('PyListObject', gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38)))
    str(): (struct PyObject *)&RegionOnHeap('PyListObject', gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38)) from tests/cpychecker/refcounts/loop_n_times/input.c:38
    r->ob_refcnt: RefcountValue(1)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38), region=RegionForGlobal(gcc.VarDecl('PyList_Type')))
  Region("region-for-arg-gcc.ParmDecl('self')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('self')")
    str(): Region("region-for-arg-gcc.ParmDecl('self')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('self')"))
  Region("region-for-arg-gcc.ParmDecl('args')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('args')")
    str(): Region("region-for-arg-gcc.ParmDecl('args')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('args')"))
  PyLongObject allocated at tests/cpychecker/refcounts/loop_n_times/input.c:42:
    repr(): RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=42))
    str(): PyLongObject allocated at tests/cpychecker/refcounts/loop_n_times/input.c:42
    r->ob_refcnt: None
    r->ob_type: None
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/loop_n_times/input.c:29

Trace 2:
  Transitions:
    'PyArg_ParseTuple() succeeds'
    'taking False path'
    'PyList_New() succeeds'
    'taking False path'
    'PyLong_FromLong() fails'
    'taking True path'
    'taking True path'
    'returning'
  Return value:
    repr(): ConcreteValue(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=45), value=0L)
    str(): (struct PyObject *)0L from tests/cpychecker/refcounts/loop_n_times/input.c:45
  Region("region-for-arg-gcc.ParmDecl('self')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('self')")
    str(): Region("region-for-arg-gcc.ParmDecl('self')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('self')"))
  Region("region-for-arg-gcc.ParmDecl('args')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('args')")
    str(): Region("region-for-arg-gcc.ParmDecl('args')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('args')"))
  PyListObject allocated at tests/cpychecker/refcounts/loop_n_times/input.c:38:
    repr(): RegionOnHeap('PyListObject', gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38))
    str(): PyListObject allocated at tests/cpychecker/refcounts/loop_n_times/input.c:38
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38), region=RegionForGlobal(gcc.VarDecl('PyList_Type')))
  Exception:
    RegionForGlobal(gcc.VarDecl('PyExc_MemoryError'))

Trace 3:
  Transitions:
    'PyArg_ParseTuple() succeeds'
    'taking False path'
    'PyList_New() succeeds'
    'taking False path'
    'PyLong_FromLong() fails'
    'taking True path'
    'taking False path'
    'calling tp_dealloc on PyListObject allocated at tests/cpychecker/refcounts/loop_n_times/input.c:38'
    'returning'
  Return value:
    repr(): ConcreteValue(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=45), value=0L)
    str(): (struct PyObject *)0L from tests/cpychecker/refcounts/loop_n_times/input.c:45
  Region("region-for-arg-gcc.ParmDecl('self')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('self')")
    str(): Region("region-for-arg-gcc.ParmDecl('self')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('self')"))
  Region("region-for-arg-gcc.ParmDecl('args')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('args')")
    str(): Region("region-for-arg-gcc.ParmDecl('args')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('args')"))
  PyListObject allocated at tests/cpychecker/refcounts/loop_n_times/input.c:38:
    repr(): RegionOnHeap('PyListObject', gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=38))
    str(): PyListObject allocated at tests/cpychecker/refcounts/loop_n_times/input.c:38
    r->ob_refcnt: None
    r->ob_type: None
  Exception:
    RegionForGlobal(gcc.VarDecl('PyExc_MemoryError'))

Trace 4:
  Transitions:
    'PyArg_ParseTuple() succeeds'
    'taking False path'
    'PyList_New() fails'
    'taking True path'
    'returning'
  Return value:
    repr(): ConcreteValue(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=40), value=0L)
    str(): (struct PyObject *)0L from tests/cpychecker/refcounts/loop_n_times/input.c:40
  Region("region-for-arg-gcc.ParmDecl('self')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('self')")
    str(): Region("region-for-arg-gcc.ParmDecl('self')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('self')"))
  Region("region-for-arg-gcc.ParmDecl('args')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('args')")
    str(): Region("region-for-arg-gcc.ParmDecl('args')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('args')"))
  Exception:
    RegionForGlobal(gcc.VarDecl('PyExc_MemoryError'))

Trace 5:
  Transitions:
    'PyArg_ParseTuple() fails'
    'taking True path'
    'returning'
  Return value:
    repr(): ConcreteValue(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=35), value=0L)
    str(): (struct PyObject *)0L from tests/cpychecker/refcounts/loop_n_times/input.c:35
  Region("region-for-arg-gcc.ParmDecl('self')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('self')")
    str(): Region("region-for-arg-gcc.ParmDecl('self')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('self')"))
  Region("region-for-arg-gcc.ParmDecl('args')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('args')")
    str(): Region("region-for-arg-gcc.ParmDecl('args')")
    r->ob_refcnt: RefcountValue(0)
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/loop_n_times/input.c', line=28), region=Region("region-for-type-of-arg-gcc.ParmDecl('args')"))
  Exception:
    RegionForGlobal(gcc.VarDecl('PyExc_TypeError'))
