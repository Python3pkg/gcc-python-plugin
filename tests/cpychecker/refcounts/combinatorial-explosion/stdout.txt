Trace 0:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:152

Trace 1:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 2:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:148

Trace 3:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 4:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 5:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 6:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 7:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 8:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 9:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 10:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:160

Trace 11:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 12:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 13:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 14:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 15:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 16:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 17:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 18:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:156

Trace 19:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 20:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 21:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 22:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 23:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 24:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 25:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 26:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:160

Trace 27:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 28:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 29:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 30:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 31:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 32:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 33:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 26
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 34:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 32
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/combinatorial-explosion/input.c:31

Trace 35:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 36:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 37:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 38:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 39:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 40:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 41:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 42:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:160

Trace 43:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 44:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 45:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 46:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 47:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 48:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 49:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 50:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:156

Trace 51:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 52:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 53:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 54:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 55:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 56:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 57:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 58:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:160

Trace 59:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 60:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 61:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 62:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 63:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 64:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 65:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 66:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 31
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:152

Trace 67:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 68:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 69:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 70:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 71:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 72:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 73:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 74:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:160

Trace 75:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 76:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 77:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 78:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 79:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 80:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 81:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 82:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 30
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:156

Trace 83:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 84:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 85:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 86:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 87:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 88:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 89:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 90:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 29
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:160

Trace 91:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 92:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 93:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 94:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 28
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:164

Trace 95:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172

Trace 96:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 27
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:168

Trace 97:
  Transitions:
    'when PyLong_FromLong() succeeds'
    'taking False path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() succeeds'
    'taking True path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'when PyModule_AddObject() fails'
    'taking False path'
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)))
    str(): (struct PyObject *)&RegionOnHeap('PyLongObject', gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32)) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:32
    r->ob_refcnt: refs: 1 + N where N >= 26
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=32), region=RegionForGlobal(gcc.VarDecl('PyLong_Type')))
  Region("region-for-arg-gcc.ParmDecl('m')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('m')")
    str(): Region("region-for-arg-gcc.ParmDecl('m')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/combinatorial-explosion/input.c', line=30), region=Region("region-for-type-of-arg-gcc.ParmDecl('m')"))
  Exception:
    (struct PyObject *)&RegionForGlobal(gcc.VarDecl('PyExc_MemoryError')) from tests/cpychecker/refcounts/combinatorial-explosion/input.c:172
