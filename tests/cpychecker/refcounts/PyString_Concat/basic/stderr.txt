tests/cpychecker/refcounts/PyString_Concat/basic/input.c: In function 'test':
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:30:5: warning: ob_refcnt of return value is 1 too low [enabled by default]
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:30:5: note: was expecting final ob_refcnt to be N + 2 (for some unknown N)
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:30:5: note: due to object being referenced by: return value, heap-region-0
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:30:5: note: but final ob_refcnt is N + 1
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:29:20: note: result of PyString_Concat allocated at:     PyString_Concat(lhs, rhs);
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:29:20: note: when treating unknown struct PyObject * * from tests/cpychecker/refcounts/PyString_Concat/basic/input.c:27 as non-NULL at:     PyString_Concat(lhs, rhs);
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:29:20: note: when treating unknown struct PyObject * from tests/cpychecker/refcounts/PyString_Concat/basic/input.c:29 as non-NULL at:     PyString_Concat(lhs, rhs);
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:30:5: note: when PyString_Concat() succeeds (Py_DECREF() without deallocation on *LHS) at:     return *lhs;
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:30:5: note: return value is now referenced by 1 non-stack value(s): heap-region-0
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:30:5: note: returning at:     return *lhs;
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:30:5: note: found 1 similar trace(s) to this
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:30:5: warning: returning (PyObject*)NULL without setting an exception [enabled by default]
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:29:20: note: when treating unknown struct PyObject * * from tests/cpychecker/refcounts/PyString_Concat/basic/input.c:27 as non-NULL at:     PyString_Concat(lhs, rhs);
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:29:20: note: when treating unknown struct PyObject * from tests/cpychecker/refcounts/PyString_Concat/basic/input.c:29 as NULL at:     PyString_Concat(lhs, rhs);
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:29:20: note: when PyString_Concat() does nothing due to NULL *lhs at:     PyString_Concat(lhs, rhs);
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:30:5: note: returning at:     return *lhs;
tests/cpychecker/refcounts/PyString_Concat/basic/input.c:28:1: note: graphical error report for function 'test' written out to 'tests/cpychecker/refcounts/PyString_Concat/basic/input.c.test-refcount-errors.html'
