Trace 0:
  Transitions:
    'returning'
  Return value:
    repr(): PointerToRegion(gcctype='struct PyObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/attributes/steals-reference-to-arg/incorrect-marking/input.c', line=46), region=RegionForGlobal(gcc.VarDecl('_Py_NoneStruct')))
    str(): (struct PyObject *)&RegionForGlobal(gcc.VarDecl('_Py_NoneStruct')) from tests/cpychecker/refcounts/attributes/steals-reference-to-arg/incorrect-marking/input.c:46
    r->ob_refcnt: refs: 1 + N where N >= 1
    r->ob_type: None
  Region("region-for-arg-gcc.ParmDecl('foo')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('foo')")
    str(): Region("region-for-arg-gcc.ParmDecl('foo')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/attributes/steals-reference-to-arg/incorrect-marking/input.c', line=40), region=Region("region-for-type-of-arg-gcc.ParmDecl('foo')"))
  Region("region-for-arg-gcc.ParmDecl('bar')"):
    repr(): Region("region-for-arg-gcc.ParmDecl('bar')")
    str(): Region("region-for-arg-gcc.ParmDecl('bar')")
    r->ob_refcnt: refs: 0 + N where N >= 1
    r->ob_type: PointerToRegion(gcctype='struct PyTypeObject *', loc=gcc.Location(file='tests/cpychecker/refcounts/attributes/steals-reference-to-arg/incorrect-marking/input.c', line=40), region=Region("region-for-type-of-arg-gcc.ParmDecl('bar')"))
  Exception:
    (struct PyObject *)0 from tests/cpychecker/refcounts/attributes/steals-reference-to-arg/incorrect-marking/input.c:41
