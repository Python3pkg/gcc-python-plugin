#ifndef INCLUDED__GCC_PYTHON_H
#define INCLUDED__GCC_PYTHON_H

#include <gcc-plugin.h>
#include "tree.h"
#include "gimple.h"

#define DECLARE_SIMPLE_WRAPPER(ARG_structname, ARG_typeobj, ARG_typename, ARG_wrappedtype, ARG_fieldname) \
  struct ARG_structname {           \
     PyObject_HEAD                  \
     ARG_wrappedtype ARG_fieldname; \
  };                                \
                                    \
  typedef struct ARG_structname ARG_structname;                          \
                                                                         \
  extern PyObject *                                                      \
  gcc_python_make_wrapper_##ARG_typename(ARG_wrappedtype ARG_fieldname); \
                                                                         \
  extern PyTypeObject ARG_typeobj;                                       \
                                                                         \
  /* end of macro */

DECLARE_SIMPLE_WRAPPER(PyGccPass,
		       gcc_PassType,
		       pass,
		       struct opt_pass *, pass)

DECLARE_SIMPLE_WRAPPER(PyGccLocation, 
		       gcc_LocationType,
		       location,
		       location_t, loc)

DECLARE_SIMPLE_WRAPPER(PyGccGimple, 
		       gcc_GimpleType,
		       gimple,
		       gimple, stmt);

DECLARE_SIMPLE_WRAPPER(PyGccEdge, 
		       gcc_EdgeType,
		       edge,
		       edge, e)

DECLARE_SIMPLE_WRAPPER(PyGccBasicBlock, 
		       gcc_BasicBlockType,
		       basic_block,
		       basic_block, bb)

DECLARE_SIMPLE_WRAPPER(PyGccCfg, 
		       gcc_CfgType,
		       cfg,
		       struct control_flow_graph *, cfg)

DECLARE_SIMPLE_WRAPPER(PyGccFunction, 
		       gcc_FunctionType,
		       function,
		       struct function *, fun)

DECLARE_SIMPLE_WRAPPER(PyGccTree,
		       gcc_TreeType,
		       tree, tree, t)

/* autogenerated-gimple.c */
int autogenerated_gimple_init_types(void);
void autogenerated_gimple_add_types(PyObject *m);
PyTypeObject* gcc_python_autogenerated_gimple_type_for_stmt(gimple g);


int
gcc_python_autogenerated_tree_init_types(void);

void
gcc_python_autogenerated_tree_add_types(PyObject *m);

PyTypeObject*
gcc_python_autogenerated_tree_type_for_tree(tree t, int borrow_ref);

PyTypeObject*
gcc_python_autogenerated_tree_type_for_tree_code(enum tree_code code, int borrow_ref);

#endif /* INCLUDED__GCC_PYTHON_H */
