/*
   Copyright 2012 David Malcolm <dmalcolm@redhat.com>
   Copyright 2012 Red Hat, Inc.

   This is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see
   <http://www.gnu.org/licenses/>.

   Checker to detect typos of the form:  malloc(sizeof(WRONG_TYPE))
*/
sm sizeof_allocation {
  state decl any_pointer ptr;
  decl any_pointer other_ptr;
  decl any_expr nmemb;
  decl any_expr sz;

  ptr.all:
    /* Various allocators: */
      /* libc: */
      { ptr = malloc(sz) }
    | { ptr = realloc(other_ptr, sz) }
      /* libpython: */
    | { ptr = PyMem_Malloc(sz) }
    | { ptr = PyMem_Realloc(other_ptr, sz) }
      /* etc */
      => {{
             import gcc
             type_pointed_to = ptr.type.dereference
             if not isinstance(type_pointed_to, gcc.VoidType):
                 required_size = type_pointed_to.sizeof
                 if sz < required_size:
                     error("allocation too small: pointer to %s (%i bytes)"
                           " initialized with allocation of %i bytes"
                           % (type_pointed_to, required_size, sz))
         }};

  ptr.all:
      /* libc: */
      { ptr = calloc(nmemb, sz) }
      => {{
             import gcc
             type_pointed_to = ptr.type.dereference
             if not isinstance(type_pointed_to, gcc.VoidType):
                 required_size = type_pointed_to.sizeof
                 allocated_size = int(nmemb) * int(sz)
                 if allocated_size < required_size:
                     error("allocation too small: pointer to %s (%i bytes)"
                           " initialized with allocation of %i bytes"
                           % (type_pointed_to, required_size, allocated_size))
         }};

}
