/*
   Copyright 2012 David Malcolm <dmalcolm@redhat.com>
   Copyright 2012 Red Hat, Inc.

   This is free software: you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see
   <http://www.gnu.org/licenses/>.

   Checker to detect typos of the form:  malloc(sizeof(WRONG_TYPE))
*/
sm sizeof_allocation {
  stateful decl any_pointer ptr;
  decl any_pointer other_ptr;
  decl any_expr nmemb;
  decl any_expr sz;

  {{
    def is_known_int(var):
        # We can only run the checker on constant integer expressions
        import gcc
        return isinstance(var.gccexpr, gcc.IntegerCst)

    def check_size(ptr, allocated_size):
        import gcc
        type_pointed_to = ptr.type.dereference
        if not isinstance(type_pointed_to, gcc.VoidType):
            required_size = type_pointed_to.sizeof
            if allocated_size < required_size:
                error("allocation too small: pointer to %s (%i bytes)"
                      " initialized with allocation of %i bytes"
                      % (type_pointed_to, required_size, allocated_size),
                      cwe="CWE-131") # "Incorrect Calculation of Buffer Size"

        # Handle cases where the cast happens on another line:
        set_state("ptr.sized", size=int(allocated_size))
  }}

  ptr.*:
    /* Various allocators: */
      /* libc: */
      { ptr = malloc(sz) }
    | { ptr = realloc(other_ptr, sz) }
      /* libpython: */
    | { ptr = PyMem_Malloc(sz) }
    | { ptr = PyMem_Realloc(other_ptr, sz) }
      /* glib: */
    | { ptr = g_malloc(sz) }
    | { ptr = g_malloc0(sz) }
    | { ptr = g_realloc(other_ptr, sz) }
    | { ptr = g_try_malloc(sz) }
    | { ptr = g_try_malloc0(sz) }
    | { ptr = g_try_realloc(other_ptr, sz) }
      /* etc */
      => {{
            if is_known_int(sz):
                check_size(ptr, sz)
         }};

  ptr.*:
      /* libc: */
      { ptr = calloc(nmemb, sz) }
      /* glib: */
    | { ptr = g_malloc_n(nmemb, sz) }
    | { ptr = g_malloc0_n(nmemb, sz) }
    | { ptr = g_realloc_n(other_pointer, nmemb, sz) }
    | { ptr = g_try_malloc_n(nmemb, sz) }
    | { ptr = g_try_malloc0_n(nmemb, sz) }
    | { ptr = g_try_realloc_n(other_pointer, nmemb, sz) }
      => {{
            if is_known_int(nmemb):
                if is_known_int(sz):
                    check_size(ptr, int(nmemb) * int(sz))
         }};

  ptr.sized:
     { other_ptr = ptr } =>
       {{
            check_size(other_ptr, allocated_size=state.size)
       }};

}
