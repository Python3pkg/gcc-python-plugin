from maketreetypes import iter_gimple_types

from cpybuilder import *

cu = CompilationUnit()
cu.add_include('gcc-python.h')
cu.add_include('gcc-python-wrappers.h')
cu.add_include('gcc-plugin.h')
cu.add_include("gimple.h")

modinit_preinit = ''
modinit_postinit = ''

gimple_types = list(iter_gimple_types())

def generate_gimple_subclasses():
    global modinit_preinit
    global modinit_postinit
    
    for gt in gimple_types:
    #print gimple_types
        cc = gt.camel_cased_string()
        pytype = PyTypeObject(identifier = 'gcc_%sType' % cc,
                              localname = cc,
                              tp_name = 'gcc.%s' % cc,
                              struct_name = 'struct PyGccGimple',
                              tp_new = 'PyType_GenericNew',
                              tp_base = '&gcc_GimpleType',
                              #tp_getset = getsettable.identifier,
                              #tp_repr = '(reprfunc)gcc_Gimple_repr',
                              #tp_str = '(reprfunc)gcc_Gimple_str',
                              )
        cu.add_defn(pytype.c_defn())
        modinit_preinit += pytype.c_invoke_type_ready()
        modinit_postinit += pytype.c_invoke_add_to_module()

generate_gimple_subclasses()

cu.add_defn("""
int autogenerated_gimple_init_types(void)
{
""" + modinit_preinit + """
    return 1;

error:
    return 0;
}
""")

cu.add_defn("""
void autogenerated_gimple_add_types(PyObject *m)
{
""" + modinit_postinit + """
}
""")


print(cu.as_str())

